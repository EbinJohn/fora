// Generated by CoffeeScript 1.6.3
(function() {
  var AppError, Controller, Forums, conf, controllers, database, db, models, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  conf = require('../../../conf');

  database = (require('../../../common/database')).Database;

  db = new database(conf.db);

  models = require('../../../models');

  utils = require('../../../common/utils');

  AppError = require('../../../common/apperror').AppError;

  Controller = require('../controller').Controller;

  controllers = require('./');

  Forums = (function(_super) {
    __extends(Forums, _super);

    function Forums() {
      this.getTypeSpecificController = __bind(this.getTypeSpecificController, this);
      this.invokeTypeSpecificController = __bind(this.invokeTypeSpecificController, this);
      this.post = __bind(this.post, this);
      this.item = __bind(this.item, this);
      this.index = __bind(this.index, this);
    }

    Forums.prototype.index = function(req, res, next) {
      var _this = this;
      return this.attachUser(arguments, function() {
        return models.Forum.find({
          network: req.network.stub
        }, (function(cursor) {
          return cursor.sort({
            lastPost: -1
          }).limit(12);
        }), {}, db, function(err, featured) {
          var forum, _i, _len;
          for (_i = 0, _len = featured.length; _i < _len; _i++) {
            forum = featured[_i];
            forum.summary = forum.getView("card");
            forum.summary.view = "standard";
          }
          return res.render(req.network.views.forums.index, {
            featured: featured,
            pageName: 'forums-page',
            pageType: 'cover-page',
            cover: '/pub/images/cover.jpg'
          });
        });
      });
    };

    Forums.prototype.item = function(req, res, next) {
      var _this = this;
      return this.attachUser(arguments, function() {
        return models.Forum.get({
          stub: req.params.forum,
          network: req.network.stub
        }, {}, db, function(err, forum) {
          return models.Post.find({
            'forum.stub': req.params.forum,
            'forum.network': req.network.stub
          }, (function(cursor) {
            return cursor.sort({
              _id: -1
            }).limit(12);
          }), {}, db, function(err, posts) {
            var post, _i, _len, _ref;
            for (_i = 0, _len = posts.length; _i < _len; _i++) {
              post = posts[_i];
              post.summary = post.getView("card");
              post.summary.view = "standard";
            }
            return res.render(req.network.views.forums.item, {
              forum: forum,
              posts: posts,
              pageName: 'forum-page',
              pageType: 'cover-page',
              cover: (_ref = _this.cover) != null ? _ref : '/pub/images/cover.jpg'
            });
          });
        });
      });
    };

    Forums.prototype.post = function(req, res, next) {
      var _this = this;
      return this.attachUser(arguments, function() {
        return _this.invokeTypeSpecificController(req, res, next, function(c) {
          return c.item;
        });
      });
    };

    Forums.prototype.invokeTypeSpecificController = function(req, res, next, getHandler) {
      var _this = this;
      return models.Forum.get({
        stub: req.params.forum,
        network: req.network.stub
      }, {}, db, function(err, forum) {
        return models.Post.get({
          'forum.id': forum._id.toString(),
          _id: database.ObjectId(req.params.id)
        }, {}, db, function(err, post) {
          return models.User.getById(post.createdBy.id, {}, db, function(err, user) {
            return getHandler(_this.getTypeSpecificController(post.type))(req, res, next, post, user, forum);
          });
        });
      });
    };

    Forums.prototype.getTypeSpecificController = function(type) {
      switch (type) {
        case 'article':
          return new controllers.Articles();
      }
    };

    return Forums;

  })(Controller);

  exports.Forums = Forums;

}).call(this);
