// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, Posts, conf, controller, models, utils, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  conf = require('../../../conf');

  models = new (require('../../../models')).Models(conf.db);

  utils = require('../../../common/utils');

  AppError = require('../../../common/apperror').AppError;

  controller = require('../controller');

  Posts = (function(_super) {
    __extends(Posts, _super);

    function Posts() {
      this.parseBody = __bind(this.parseBody, this);
      this.addComment = __bind(this.addComment, this);
      this.remove = __bind(this.remove, this);
      this.edit = __bind(this.edit, this);
      this.create = __bind(this.create, this);      _ref = Posts.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Posts.prototype.create = function(req, res, next, forum) {
      var post,
        _this = this;

      post = new models.Post;
      post.network = req.network.stub;
      post.createdBy = req.user;
      post.forum = forum.summarize();
      post.rating = 0;
      if (req.body.publish === 'true') {
        post.publishedAt = Date.now();
        post.state = 'published';
      } else {
        post.state = 'draft';
      }
      this.parseBody(post, req.body);
      return post.save({
        user: req.user
      }, function(err, post) {
        var item, message;

        if (!err) {
          item = new models.ItemView({
            network: req.network.stub,
            forum: post.forum.stub,
            forumType: 'post',
            itemid: post._id.toString(),
            createdBy: post.createdBy,
            createdAt: post.createdAt,
            state: post.state,
            type: 'post',
            data: post.createView('summary')
          });
          if (post.publishedAt) {
            item.publishedAt = post.publishedAt;
          }
          item.save({
            user: req.user
          }, function() {
            return res.send(post);
          });
          models.Post.refreshCollectionSnapshot(post, {}, function() {});
          if (req.body.publish === 'true') {
            message = new models.Message({
              network: req.network.stub,
              userid: '0',
              type: "global-notification",
              reason: 'published-post',
              related: [
                {
                  type: 'user',
                  id: req.user.id
                }, {
                  type: 'forum',
                  id: forum.stub
                }
              ],
              data: {
                post: post
              }
            });
            return message.save({}, function(err, msg) {});
          }
        } else {
          return next(err);
        }
      });
    };

    Posts.prototype.edit = function(req, res, next, forum) {
      var _handleError,
        _this = this;

      _handleError = this.handleError(next);
      return models.Post.get({
        uid: req.params.item,
        network: req.network.stub
      }, {}, function(err, post) {
        var alreadyPublished, _ref1;

        if (!err) {
          if (post) {
            if (post.createdBy.id === req.user.id || _this.isAdmin(req.user, req.network)) {
              alreadyPublished = post.state === 'published';
              if (!alreadyPublished && req.body.publish === 'true') {
                if ((_ref1 = post.publishedAt) == null) {
                  post.publishedAt = Date.now();
                }
                post.state = 'published';
              }
              _this.parseBody(post, req.body);
              return post.save({
                user: req.user
              }, _handleError(function(err, post) {
                var message;

                if (!err) {
                  models.ItemView.get({
                    type: "post",
                    forum: post.forum,
                    itemid: post.id.toString()
                  }, {}, function(err, item) {
                    item.data = post.createView('summary');
                    item.state = post.state;
                    if (post.publishedAt) {
                      item.publishedAt = post.publishedAt;
                    }
                    return item.save({
                      user: req.user
                    }, function() {
                      return res.send(post);
                    });
                  });
                  models.Post.refreshCollectionSnapshot(post, {}, function() {});
                  if (post.createdBy.id === req.user.id && !alreadyPublished && req.body.publish === 'true') {
                    message = new models.Message({
                      network: req.network.stub,
                      userid: '0',
                      type: "global-notification",
                      reason: 'published-post',
                      related: [
                        {
                          type: 'user',
                          id: req.user.id
                        }, {
                          type: 'forum',
                          id: forum.stub
                        }
                      ],
                      data: {
                        post: post
                      }
                    });
                    return message.save({}, function(err, msg) {});
                  }
                }
              }));
            } else {
              return res.send('Access denied.');
            }
          } else {
            return res.send('Invalid post.');
          }
        } else {
          return next(err);
        }
      });
    };

    Posts.prototype.remove = function(req, res, next, forum) {
      var _this = this;

      return models.Post.get({
        uid: req.params.item,
        network: req.network.stub
      }, {}, function(err, post) {
        if (!err) {
          if (post) {
            if (post.createdBy.id === req.user.id || _this.isAdmin(req.user, req.network)) {
              return post.destroy({}, function(err, post) {
                models.ItemView.get({
                  type: "post",
                  forum: post.forum,
                  itemid: post.id.toString()
                }, {}, function(err, item) {
                  return item.destroy({}, function() {});
                });
                models.Post.refreshCollectionSnapshot(post, {}, function() {});
                return res.send(post);
              });
            } else {
              return res.send('Access denied.');
            }
          } else {
            return res.send("Invalid post.");
          }
        } else {
          return next(err);
        }
      });
    };

    Posts.prototype.addComment = function(req, res, next, forum) {
      var contentType, _ref1, _ref2, _ref3,
        _this = this;

      contentType = (_ref1 = (_ref2 = forum.settings) != null ? (_ref3 = _ref2.comments) != null ? _ref3.contentType : void 0 : void 0) != null ? _ref1 : 'text';
      if (contentType === 'text') {
        return models.Post.get({
          uid: req.params.item,
          network: req.network.stub
        }, {}, function(err, post) {
          var comment;

          comment = new models.Comment();
          comment.createdBy = req.user;
          comment.forum = forum.stub;
          comment.itemid = post._id.toString();
          comment.data = req.body.data;
          return comment.save({}, function(err, comment) {
            return res.send(comment);
          });
        });
      } else {
        return next(new AppError('Unsupported Comment Type', 'UNSUPPORTED_COMMENT_TYPE'));
      }
    };

    Posts.prototype.parseBody = function(post, body) {
      post.summary = {};
      if (body.stub) {
        post.stub = body.stub.toLowerCase().trim().replace(/\s+/g, '-').replace(/[^a-z0-9|-]/g, '').replace(/^\d*/, '');
      }
      if (body.title) {
        post.title = body.title;
        post.summary.title = post.title;
      }
      if (body.content) {
        post.content = body.content;
        post.summary.text = post.content;
      }
      if (body.cover) {
        post.cover = body.cover;
        if (body.coverTitle) {
          post.coverTitle = body.coverTitle;
        }
        return post.summary.image = body.smallCover;
      } else {
        post.cover = null;
        post.coverTitle = null;
        return post.summary.image = null;
      }
    };

    return Posts;

  })(controller.Controller);

  exports.Posts = Posts;

}).call(this);
