// Generated by CoffeeScript 1.6.3
(function() {
  var AppError, Sessions, conf, controller, db, https, models, utils, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  https = require('https');

  conf = require('../../../conf');

  db = new (require('../../../common/database')).Database(conf.db);

  models = require('../../../models');

  utils = require('../../../common/utils');

  AppError = require('../../../common/apperror').AppError;

  controller = require('../controller');

  Sessions = (function(_super) {
    __extends(Sessions, _super);

    function Sessions() {
      this.create = __bind(this.create, this);
      _ref = Sessions.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Sessions.prototype.create = function(req, res, next) {
      var accessToken, client, options,
        _this = this;
      if (req.body.domain === 'fb') {
        client = new FaceBookClient();
        options = {
          path: '/me?' + querystring.stringify({
            fields: 'id,username,name,first_name,last_name,location,email',
            access_token: req.body.accessToken,
            client_id: conf.auth.facebook.FACEBOOK_APP_ID,
            client_secret: conf.auth.facebook.FACEBOOK_SECRET
          })
        };
        return client.secureGraphRequest(options, function(err, userDetails) {
          var _userDetails;
          _userDetails = _this.parseFBUserDetails(JSON.parse(userDetails));
          if (_userDetails.domainid && _userDetails.name) {
            return models.User.getOrCreateUser(_userDetails, 'fb', req.body.accessToken, {}, db, function(err, user, session) {
              if (!err) {
                res.contentType('json');
                return res.send({
                  userid: user._id,
                  domain: 'fb',
                  username: user.username,
                  name: user.name,
                  passkey: session.passkey
                });
              } else {
                return next(err);
              }
            });
          } else {
            return next(new AppError('Invalid credentials', 'INVALID_CREDENTIALS'));
          }
        });
      } else if (req.body.domain === 'users') {
        if (req.body.secret === conf.auth.adminkeys["default"]) {
          accessToken = utils.uniqueId(24);
          req.body.createdVia = 'internal';
          return models.User.getOrCreateUser(req.body, 'users', accessToken, {}, db, function(err, user, session) {
            if (!err) {
              res.contentType('json');
              return res.send({
                userid: user._id,
                domain: 'users',
                username: user.username,
                name: user.name,
                passkey: session.passkey
              });
            } else {
              return next(err);
            }
          });
        } else {
          return next(new AppError('Access denied', 'ACCESS_DENIED'));
        }
      }
    };

    return Sessions;

  })(controller.Controller);

  exports.Sessions = Sessions;

}).call(this);
