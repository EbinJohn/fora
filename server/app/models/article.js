// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, Article, BaseModel, async, mdparser, postModule, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  async = require('../common/async');

  utils = require('../common/utils');

  AppError = require('../common/apperror').AppError;

  mdparser = require('../common/markdownutil').markedb;

  BaseModel = require('./basemodel').BaseModel;

  postModule = require('./post');

  Article = (function(_super) {
    __extends(Article, _super);

    Article._getMeta = function() {
      var meta, userModule;

      userModule = require('./user');
      meta = {
        fields: {
          stub: {
            type: 'string',
            required: false
          },
          state: {
            type: 'string',
            validate: function() {
              return ['draft', 'published'].indexOf(this.state) !== -1;
            }
          },
          title: 'string',
          cover: {
            type: 'string',
            required: false
          },
          smallCover: {
            type: 'string',
            required: false,
            validate: function() {
              if (this.cover && !this.smallCover) {
                return 'Missing small cover.';
              } else {
                return true;
              }
            }
          },
          content: {
            type: 'string',
            required: 'false'
          },
          format: {
            type: 'string',
            validate: function() {
              return ['markdown'].indexOf(this.format) !== -1;
            }
          },
          rating: 'number',
          recommendations: {
            type: 'array',
            contents: userModule.User.Summary,
            validate: function() {
              var user, _i, _len, _ref, _results;

              _ref = this.recommendations;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                user = _ref[_i];
                _results.push(user.validate());
              }
              return _results;
            }
          },
          publishedAt: {
            type: 'number',
            required: false,
            validate: function() {
              return !(this.state === 'published' && !this.publishedAt);
            }
          }
        }
      };
      return meta = this.mergeMeta(meta, postModule.Post._getMeta());
    };

    function Article(params) {
      this.summarize = __bind(this.summarize, this);      this.type = 'article';
      Article.__super__.constructor.apply(this, arguments);
    }

    Article.prototype.summarize = function(view) {
      if (view == null) {
        view = "standard";
      }
      switch (view) {
        case "concise":
          return {
            type: this.cover ? 'image-text' : 'text',
            image: this.smallCover,
            title: this.title,
            content: this.format === 'markdown' && this.content ? mdparser(this.content) : 'Invalid format.'
          };
      }
    };

    return Article;

  })(postModule.Post);

  exports.Article = Article;

}).call(this);
