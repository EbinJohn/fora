// Generated by CoffeeScript 1.6.3
(function() {
  var AppError, Article, async, mdparser, postModule, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  async = require('../common/async');

  utils = require('../common/utils');

  AppError = require('../common/apperror').AppError;

  mdparser = require('../common/markdownutil').marked;

  postModule = require('./post');

  Article = (function(_super) {
    __extends(Article, _super);

    Article.describeModel = function() {
      var description, models;
      models = this.getModels();
      description = {
        type: Article,
        fields: {
          cover: {
            type: 'string',
            required: false
          },
          smallCover: {
            type: 'string',
            required: false,
            validate: function() {
              if (this.cover && !this.smallCover) {
                return 'Missing small cover.';
              } else {
                return true;
              }
            }
          },
          content: {
            type: 'string',
            required: 'false'
          },
          format: {
            type: 'string',
            validate: function() {
              return ['markdown'].indexOf(this.format) !== -1;
            }
          }
        }
      };
      return this.mergeModelDescription(description, models.Post.describeModel());
    };

    function Article(params) {
      this.formatContent = __bind(this.formatContent, this);
      this.getView = __bind(this.getView, this);
      Article.__super__.constructor.apply(this, arguments);
      if (this.type == null) {
        this.type = 'article';
      }
    }

    Article.prototype.getView = function(name) {
      if (name == null) {
        name = "standard";
      }
      switch (name) {
        case "snapshot":
          return {
            image: this.smallCover,
            title: this.title,
            createdBy: this.createdBy,
            id: this._id.toString()
          };
        case "card":
          return {
            image: this.smallCover,
            title: this.title,
            content: this.formatContent(),
            createdBy: this.createdBy,
            forum: this.forum,
            id: this._id.toString()
          };
      }
    };

    Article.prototype.formatContent = function() {
      if (this.format === 'markdown') {
        if (this.content) {
          return mdparser(this.content);
        }
      } else {
        return 'Invalid format.';
      }
    };

    return Article;

  })(postModule.Post);

  exports.Article = Article;

}).call(this);
