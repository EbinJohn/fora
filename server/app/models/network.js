// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, BaseModel, Network, conf, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AppError = require('../common/apperror').AppError;

  conf = require('../conf');

  BaseModel = require('./basemodel').BaseModel;

  Network = (function(_super) {
    __extends(Network, _super);

    function Network() {
      _ref = Network.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Network._getMeta = function() {
      var User;

      User = require('./user').User;
      return {
        type: Network,
        collection: 'networks',
        fields: {
          name: 'string',
          stub: 'string',
          authenticationTypes: {
            type: 'array',
            contents: 'object',
            validate: function() {
              var errors, type, _i, _len, _ref1;

              if (!this.authenticationTypes.length) {
                return 'Authentication types not defined.';
              } else {
                errors = [];
                _ref1 = this.authenticationTypes;
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  type = _ref1[_i];
                  if (['facebook', 'twitter', 'users'].indexOf(type.name === -1)) {
                    errors.push("" + type.name + " is not a valid Authentication Type.");
                  }
                  if (type.name === 'twitter') {
                    if (!type.params) {
                      errors.push("Twitter authentication parameters are missing.");
                    } else {
                      if (!type.params.TWITTER_CONSUMER_KEY) {
                        errors.push("Twitter consumer key is missing.");
                      }
                      if (!type.params.TWITTER_SECRET) {
                        errors.push("Twitter consumer secret is missing.");
                      }
                      if (!type.params.TWITTER_CALLBACK) {
                        errors.push("Twitter callback is missing.");
                      }
                    }
                  }
                }
                return errors;
              }
            }
          },
          admins: {
            type: 'array',
            contents: User.Summary,
            validate: function() {
              var admin, _i, _len, _ref1, _results;

              if (!this.admins.length) {
                return errors.push('admins are missing.');
              } else {
                _ref1 = this.admins;
                _results = [];
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  admin = _ref1[_i];
                  _results.push(admin.validate());
                }
                return _results;
              }
            }
          }
        },
        logging: {
          isLogged: true
        }
      };
    };

    return Network;

  })(BaseModel);

  exports.Network = Network;

}).call(this);
