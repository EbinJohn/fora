// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, BaseModel, ItemView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AppError = require('../common/apperror').AppError;

  BaseModel = require('./basemodel').BaseModel;

  ItemView = (function(_super) {
    __extends(ItemView, _super);

    ItemView._getMeta = function() {
      var User;

      User = require('./user').User;
      return {
        type: ItemView,
        collection: 'itemviews',
        fields: {
          forum: 'string',
          itemid: 'string',
          type: 'string',
          data: 'object',
          meta: {
            type: 'array',
            contents: 'string'
          },
          createdBy: {
            type: User.Summary,
            validate: function() {
              return this.createdBy.validate();
            }
          },
          publishedAt: {
            type: 'number',
            validate: function() {
              if (this.publishedAt && isNaN(this.publishedAt)) {
                return ['publishedAt must be a number.'];
              }
            }
          },
          state: {
            type: 'string',
            validate: function() {
              return ['new', 'draft', 'published'].indexOf(this.state) !== -1;
            }
          },
          createdAt: {
            autoGenerated: true,
            event: 'created'
          },
          updatedAt: {
            autoGenerated: true,
            event: 'updated'
          }
        },
        logging: {
          isLogged: false
        }
      };
    };

    ItemView.search = function(criteria, settings, context, cb) {
      var k, limit, params, v;

      limit = ItemView.getLimit(settings.limit, 100, 1000);
      params = {};
      for (k in criteria) {
        v = criteria[k];
        params[k] = v;
      }
      return ItemView.find(params, (function(cursor) {
        return cursor.sort(settings.sort).limit(limit);
      }), context, cb);
    };

    function ItemView(params) {
      this.save = __bind(this.save, this);
      var _ref;

      if ((_ref = this.meta) == null) {
        this.meta = [];
      }
      ItemView.__super__.constructor.apply(this, arguments);
    }

    ItemView.prototype.save = function(context, cb) {
      return ItemView.__super__.save.apply(this, arguments);
    };

    return ItemView;

  }).call(this, BaseModel);

  exports.ItemView = ItemView;

}).call(this);
