// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, BaseModel, ItemView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require('./basemodel').BaseModel;

  AppError = require('../common/apperror').AppError;

  ItemView = (function(_super) {
    __extends(ItemView, _super);

    ItemView._meta = {
      type: ItemView,
      collection: 'itemviews',
      fields: {
        network: 'string',
        forum: 'string',
        itemid: 'string',
        type: 'string',
        data: 'object',
        meta: {
          type: 'array',
          contents: 'string'
        },
        createdBy: {
          type: ItemView._models.User.Summary
        },
        publishedAt: {
          type: 'number',
          validate: function() {
            if (this.publishedAt && isNaN(this.publishedAt)) {
              return ['PublishedAt must be a number.'];
            }
          }
        },
        state: {
          type: 'string',
          validate: function() {
            if (['new', 'draft', 'published'].indexOf(this) === -1) {
              return ['State should be one of new, draft or published.'];
            }
          }
        },
        createdAt: {
          autoGenerated: true,
          event: 'created'
        },
        updatedAt: {
          autoGenerated: true,
          event: 'updated'
        }
      },
      logging: {
        isLogged: false
      }
    };

    ItemView.search = function(criteria, settings, context, cb) {
      var k, limit, params, v;

      limit = ItemView.getLimit(settings.limit, 100, 1000);
      params = {};
      for (k in criteria) {
        v = criteria[k];
        params[k] = v;
      }
      return ItemView.find(params, (function(cursor) {
        return cursor.sort(settings.sort).limit(limit);
      }), context, cb);
    };

    function ItemView(params) {
      this.validate = __bind(this.validate, this);
      this.save = __bind(this.save, this);
      var _ref;

      if ((_ref = this.meta) == null) {
        this.meta = [];
      }
      ItemView.__super__.constructor.apply(this, arguments);
    }

    ItemView.prototype.save = function(context, cb) {
      return ItemView.__super__.save.apply(this, arguments);
    };

    ItemView.prototype.validate = function() {
      var errors, item, _errors, _i, _len, _ref;

      errors = ItemView.__super__.validate.call(this).errors;
      if (!this.network || typeof this.network !== 'string') {
        errors.push('Invalid network.');
      }
      if (!this.forum) {
        errors.push('Invalid forum.');
      }
      if (!this.data) {
        errors.push('data missing.');
      }
      _ref = this.meta;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (typeof item !== 'string') {
          errors.push("Invalid item(" + item + ") in meta.");
        }
      }
      if (!this.type || ['featured', 'post'].indexOf(this.type) === -1) {
        errors.push("Invalid type.");
      }
      _errors = ItemView._models.User.validateSummary(this.createdBy);
      if (_errors.length) {
        errors.push('Invalid createdBy.');
        errors = errors.concat(_errors);
      }
      if (this.publishedAt && isNaN(this.publishedAt)) {
        errors.push('PublishedAt must be a number.');
      }
      if (!this.state) {
        errors.push('Invalid state.');
      }
      return {
        isValid: errors.length === 0,
        errors: errors
      };
    };

    return ItemView;

  }).call(this, BaseModel);

  exports.ItemView = ItemView;

}).call(this);
