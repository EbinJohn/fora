// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, Comment, Models, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Models = require('./');

  AppError = require('../common/apperror').AppError;

  Comment = (function(_super) {
    __extends(Comment, _super);

    function Comment() {
      this.save = __bind(this.save, this);      _ref = Comment.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Comment._meta = {
      type: Comment,
      collection: 'comments',
      fields: {
        network: 'string',
        forum: 'string',
        itemid: 'string',
        data: 'object',
        createdBy: {
          type: Models.User.Summary,
          validate: function() {
            return this.createdBy.validate();
          }
        },
        createdAt: {
          autoGenerated: true,
          event: 'created'
        },
        updatedAt: {
          autoGenerated: true,
          event: 'updated'
        }
      },
      logging: {
        isLogged: true,
        onInsert: 'NEW_COMMENT'
      },
      validateMultiRecordOperationParams: function(params) {
        return params.postid;
      }
    };

    Comment.prototype.save = function(context, cb) {
      return Comment.__super__.save.call(this, context, cb);
    };

    return Comment;

  })(Models.BaseModel);

  exports.Comment = Comment;

}).call(this);
