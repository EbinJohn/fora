// Generated by CoffeeScript 1.6.3
(function() {
  var AppError, BaseModel, Post, async, mdparser, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  async = require('../common/async');

  utils = require('../common/utils');

  AppError = require('../common/apperror').AppError;

  mdparser = require('../common/markdownutil').marked;

  BaseModel = require('./basemodel').BaseModel;

  Post = (function(_super) {
    __extends(Post, _super);

    Post.describeModel = function() {
      var forumModule, models;
      models = this.getModels();
      forumModule = require('./forum');
      return {
        type: Post,
        collection: 'posts',
        discriminator: function(obj) {
          if (obj.type === 'article') {
            return models.Article;
          }
        },
        fields: {
          type: 'string',
          forum: {
            type: models.Forum.Summary
          },
          createdBy: {
            type: models.User.Summary,
            validate: function() {
              return this.createdBy.validate();
            }
          },
          meta: {
            type: 'array',
            contents: 'string'
          },
          stub: {
            type: 'string',
            required: false
          },
          state: {
            type: 'string',
            validate: function() {
              return ['draft', 'published'].indexOf(this.state) !== -1;
            }
          },
          title: 'string',
          recommendations: {
            type: 'array',
            contents: models.User.Summary,
            validate: function() {
              var user, _i, _len, _ref, _results;
              _ref = this.recommendations;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                user = _ref[_i];
                _results.push(user.validate());
              }
              return _results;
            }
          },
          publishedAt: {
            type: 'number',
            required: false,
            validate: function() {
              return !(this.state === 'published' && !this.publishedAt);
            }
          },
          createdAt: {
            autoGenerated: true,
            event: 'created'
          },
          updatedAt: {
            autoGenerated: true,
            event: 'updated'
          }
        },
        concurrency: 'optimistic',
        logging: {
          isLogged: true,
          onInsert: 'NEW_POST'
        }
      };
    };

    Post.search = function(criteria, settings, context, db, cb) {
      var k, limit, params, v;
      limit = Post.getLimit(settings.limit, 100, 1000);
      params = {};
      for (k in criteria) {
        v = criteria[k];
        params[k] = v;
      }
      return Post.find(params, (function(cursor) {
        return cursor.sort(settings.sort).limit(limit);
      }), context, db, cb);
    };

    function Post(params) {
      this.save = __bind(this.save, this);
      Post.__super__.constructor.apply(this, arguments);
      if (this.recommendations == null) {
        this.recommendations = [];
      }
      if (this.meta == null) {
        this.meta = [];
      }
      if (this.tags == null) {
        this.tags = [];
      }
      if (this.rating == null) {
        this.rating = 1;
      }
      if (this.createdAt == null) {
        this.createdAt = Date.now();
      }
    }

    Post.prototype.save = function(context, db, cb) {
      var onSave,
        _this = this;
      onSave = function() {
        if (_this.state === 'published') {
          return _this.getModels().Forum.getById(_this.forum.id, {}, db, function(err, forum) {
            return forum.refreshSnapshot({}, db, function() {});
          });
        }
      };
      if (this.stub) {
        return Post.get({
          stub: this.stub
        }, {}, db, function(err, post) {
          if (!post) {
            onSave();
            return Post.__super__.save.apply(_this, arguments);
          } else {
            return cb(new AppError("Stub already exists", "STUB_EXISTS"));
          }
        });
      } else {
        onSave();
        return Post.__super__.save.apply(this, arguments);
      }
    };

    return Post;

  }).call(this, BaseModel);

  exports.Post = Post;

}).call(this);
