// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, BaseModel, UserInfo,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require('./basemodel').BaseModel;

  AppError = require('../common/apperror').AppError;

  UserInfo = (function(_super) {
    __extends(UserInfo, _super);

    /*
        Fields
            - network (string)        
            - userid (string)         
            - subscriptions (list of forum summary)   
            - following (list of user summary)
            - lastMessageAccessTime (integer)
    */


    UserInfo._meta = {
      type: UserInfo,
      collection: 'userinfo',
      autoInsertedFields: {
        created: 'createdAt',
        updated: 'timestamp'
      },
      logging: {
        isLogged: false,
        onInsert: 'NEW_USERINFO'
      }
    };

    function UserInfo(params) {
      this.validate = __bind(this.validate, this);
      this.save = __bind(this.save, this);
      var _ref, _ref1;

      if ((_ref = this.subscriptions) == null) {
        this.subscriptions = [];
      }
      if ((_ref1 = this.following) == null) {
        this.following = [];
      }
      UserInfo.__super__.constructor.apply(this, arguments);
    }

    UserInfo.prototype.save = function(context, cb) {
      return UserInfo.__super__.save.apply(this, arguments);
    };

    UserInfo.prototype.validate = function() {
      var errors, forum, user, _errors, _i, _j, _len, _len1, _ref, _ref1;

      errors = UserInfo.__super__.validate.call(this).errors;
      if (!this.network || typeof this.network !== 'string') {
        errors.push('Invalid network.');
      }
      if (!this.userid) {
        errors.push('Missing userid.');
      }
      if (!this.subscriptions) {
        errors.push('Missing subscriptions.');
      }
      _ref = this.subscriptions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        forum = _ref[_i];
        _errors = UserInfo._models.Forum.validateSummary(forum);
        if (_errors.length) {
          errors.push('Invalid subscription.');
          errors = errors.concat(_errors);
        }
      }
      if (!this.following) {
        errors.push('Missing following.');
      }
      _ref1 = this.following;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        user = _ref1[_j];
        _errors = UserInfo._models.User.validateSummary(user);
        if (_errors.length) {
          errors.push('Invalid followed.');
          errors = errors.concat(_errors);
        }
      }
      return {
        isValid: errors.length === 0,
        errors: errors
      };
    };

    return UserInfo;

  })(BaseModel);

  exports.UserInfo = UserInfo;

}).call(this);
