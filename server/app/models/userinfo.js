// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, BaseModel, Forum, Models, User, UserInfo,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Models = require('./');

  AppError = require('../common/apperror').AppError;

  BaseModel = require('./basemodel').BaseModel;

  User = require('./user').User;

  Forum = require('./forum').Forum;

  UserInfo = (function(_super) {
    __extends(UserInfo, _super);

    UserInfo._getMeta = function() {
      return {
        type: UserInfo,
        collection: 'userinfo',
        fields: {
          network: 'string',
          userid: 'string',
          subscriptions: {
            type: 'array',
            contents: Forum.Summary,
            validate: function() {
              var item, _i, _len, _ref, _results;

              _ref = this.subscriptions;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                item = _ref[_i];
                _results.push(item.validate());
              }
              return _results;
            }
          },
          following: {
            type: 'array',
            contents: User.Summary,
            validate: function() {
              var item, _i, _len, _ref, _results;

              _ref = this.following;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                item = _ref[_i];
                _results.push(item.validate());
              }
              return _results;
            }
          },
          lastMessageAccessTime: 'number',
          createdAt: {
            autoGenerated: true,
            event: 'created'
          },
          updatedAt: {
            autoGenerated: true,
            event: 'updated'
          }
        },
        logging: {
          isLogged: false,
          onInsert: 'NEW_USERINFO'
        }
      };
    };

    function UserInfo(params) {
      this.save = __bind(this.save, this);
      var _ref, _ref1;

      if ((_ref = this.subscriptions) == null) {
        this.subscriptions = [];
      }
      if ((_ref1 = this.following) == null) {
        this.following = [];
      }
      UserInfo.__super__.constructor.apply(this, arguments);
    }

    UserInfo.prototype.save = function(context, cb) {
      return UserInfo.__super__.save.apply(this, arguments);
    };

    return UserInfo;

  })(BaseModel);

  exports.UserInfo = UserInfo;

}).call(this);
