// Generated by CoffeeScript 1.6.3
(function() {
  var AppError, BaseModel, Summary, User, utils, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  utils = require('../common/utils');

  AppError = require('../common/apperror').AppError;

  BaseModel = require('./basemodel').BaseModel;

  User = (function(_super) {
    __extends(User, _super);

    User.describeModel = function() {
      return {
        type: User,
        collection: 'users',
        fields: {
          domain: {
            type: 'string',
            validate: function() {
              return ['twitter', 'fb', 'users'].indexOf(this.domain) !== -1;
            }
          },
          domainid: 'string',
          username: 'string',
          name: 'string',
          location: 'string',
          picture: 'string',
          thumbnail: 'string',
          email: 'string',
          accessToken: {
            type: 'string',
            required: false
          },
          lastLogin: 'number',
          following: {
            type: 'array',
            contents: this.getModels().User.Summary,
            validate: function() {
              var x, _i, _len, _ref, _results;
              _ref = this.following;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                x = _ref[_i];
                _results.push(x.validate());
              }
              return _results;
            }
          },
          subscriptions: {
            type: 'array',
            contents: this.getModels().Forum.Summary,
            validate: function() {
              var x, _i, _len, _ref, _results;
              _ref = this.subscriptions;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                x = _ref[_i];
                _results.push(x.validate());
              }
              return _results;
            }
          },
          about: {
            type: 'string',
            required: false
          },
          createdAt: {
            autoGenerated: true,
            event: 'created'
          },
          updatedAt: {
            autoGenerated: true,
            event: 'updated'
          }
        },
        logging: {
          isLogged: true,
          onInsert: 'NEW_USER'
        }
      };
    };

    User.getOrCreateUser = function(userDetails, domain, accessToken, context, db, cb) {
      return User.getModels().Session.get({
        accessToken: accessToken
      }, context, db, function(err, session) {
        if (err) {
          return cb(err);
        } else {
          if (session == null) {
            session = new (User.getModels().Session)({
              passkey: utils.uniqueId(24),
              accessToken: accessToken
            });
          }
          return User.get({
            domain: domain,
            username: userDetails.username
          }, context, db, function(err, user) {
            var _ref, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
            if (user != null) {
              user.name = (_ref = userDetails.name) != null ? _ref : user.name;
              user.domainid = (_ref1 = userDetails.domainid) != null ? _ref1 : user.domainid;
              user.username = (_ref2 = userDetails.username) != null ? _ref2 : userDetails.domainid;
              user.location = (_ref3 = userDetails.location) != null ? _ref3 : user.location;
              user.picture = (_ref4 = userDetails.picture) != null ? _ref4 : user.picture;
              user.thumbnail = (_ref5 = userDetails.thumbnail) != null ? _ref5 : user.thumbnail;
              user.tile = (_ref6 = userDetails.tile) != null ? _ref6 : user.tile;
              user.email = (_ref7 = userDetails.email) != null ? _ref7 : 'unknown@poe3.com';
              user.lastLogin = Date.now();
              return user.save(context, db, function(err, u) {
                if (!err) {
                  session.userid = u._id.toString();
                  return session.save(context, db, function(err, session) {
                    if (!err) {
                      return cb(null, u, session);
                    } else {
                      return cb(err);
                    }
                  });
                } else {
                  return cb(err);
                }
              });
            } else {
              user = new User();
              user.domain = domain;
              user.domainid = userDetails.domainid;
              user.username = (_ref8 = userDetails.username) != null ? _ref8 : userDetails.domainid;
              if (domain === 'fb') {
                user.facebookUsername = userDetails.username;
              }
              if (domain === 'tw') {
                user.twitterUsername = userDetails.username;
              }
              user.name = userDetails.name;
              user.location = userDetails.location;
              user.picture = userDetails.picture;
              user.thumbnail = userDetails.thumbnail;
              user.tile = (_ref9 = userDetails.tile) != null ? _ref9 : '/images/collection-tile.png';
              user.email = (_ref10 = userDetails.email) != null ? _ref10 : 'unknown@poe3.com';
              user.lastLogin = Date.now();
              user.preferences = {
                canEmail: true
              };
              user.createdAt = Date.now();
              return user.save(context, db, function(err, u) {
                var userinfo;
                if (!err) {
                  userinfo = new (User.getModels().UserInfo);
                  userinfo.userid = u._id.toString();
                  return userinfo.save(context, db, function(err, _uinfo) {
                    if (!err) {
                      session.userid = u._id.toString();
                      return session.save(context, db, function(err, session) {
                        if (!err) {
                          return cb(null, u, session);
                        } else {
                          return cb(err);
                        }
                      });
                    } else {
                      return cb(err);
                    }
                  });
                } else {
                  return cb(err);
                }
              });
            }
          });
        }
      });
    };

    User.getByUsername = function(domain, username, context, db, cb) {
      return User.get({
        domain: domain,
        username: username
      }, context, db, function(err, user) {
        return cb(null, user);
      });
    };

    function User(params) {
      this.summarize = __bind(this.summarize, this);
      this.getUrl = __bind(this.getUrl, this);
      if (this.about == null) {
        this.about = '';
      }
      if (this.karma == null) {
        this.karma = 1;
      }
      if (this.preferences == null) {
        this.preferences = {};
      }
      this.following = [];
      this.followerCount = [];
      this.subscriptions = [];
      this.totalItemCount = 0;
      User.__super__.constructor.apply(this, arguments);
    }

    User.prototype.getUrl = function() {
      if (this.domain === 'tw') {
        return "/@" + this.username;
      } else {
        return "/" + this.domain + "/" + this.username;
      }
    };

    User.prototype.summarize = function() {
      return new Summary({
        id: this._id.toString(),
        domain: this.domain,
        username: this.username,
        name: this.name
      });
    };

    return User;

  }).call(this, BaseModel);

  Summary = (function(_super) {
    __extends(Summary, _super);

    function Summary() {
      _ref = Summary.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Summary.describeModel = function() {
      return {
        type: Summary,
        fields: {
          id: 'string',
          domain: {
            type: 'string',
            validate: function() {
              return ['twitter', 'fb', 'users'].indexOf(this.domain) !== -1;
            }
          },
          username: 'string',
          name: 'string'
        }
      };
    };

    return Summary;

  })(BaseModel);

  User.Summary = Summary;

  exports.User = User;

}).call(this);
