// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, BaseModel, Session, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require('./basemodel').BaseModel;

  AppError = require('../common/apperror').AppError;

  Session = (function(_super) {
    __extends(Session, _super);

    function Session() {
      this.validate = __bind(this.validate, this);      _ref = Session.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
        Fields
            - network (string)        
            - passkey (string)
            - accessToken (string)
            - userid (string)
    */


    Session._meta = {
      type: Session,
      collection: 'sessions',
      autoInsertedFields: {
        created: 'createdAt',
        updated: 'timestamp'
      },
      logging: {
        isLogged: false
      }
    };

    Session.prototype.validate = function() {
      var errors;

      errors = Session.__super__.validate.call(this).errors;
      if (!this.network || typeof this.network !== 'string') {
        errors.push('Invalid network.');
      }
      if (!this.passkey) {
        errors.push('Invalid passkey.');
      }
      if (!this.accessToken) {
        errors.push('Invalid accessToken.');
      }
      if (!this.userid) {
        errors.push('Invalid userid.');
      }
      return {
        isValid: errors.length === 0,
        errors: errors
      };
    };

    return Session;

  })(BaseModel);

  exports.Session = Session;

}).call(this);
