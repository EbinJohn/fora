// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, BaseModel, Forum,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require('./basemodel').BaseModel;

  AppError = require('../common/apperror').AppError;

  Forum = (function(_super) {
    __extends(Forum, _super);

    /*
        Fields
            - network (string)        
            - name (string)
            - stub (string)
            - type (string)
            - settings (string)            
            - icon
            - iconThumbnail
            - cover
            - createdBy (summarized user)
            - moderators (array of summarized user)
            - totalItems (integer))
            - totalSubscribers (integer)
    */


    Forum._meta = {
      type: Forum,
      forum: 'forums',
      autoInsertedFields: {
        created: 'createdAt',
        updated: 'timestamp'
      },
      logging: {
        isLogged: true,
        onInsert: 'NEW_FORUM'
      }
    };

    function Forum(params) {
      this.validate = __bind(this.validate, this);
      this.summarize = __bind(this.summarize, this);
      this.save = __bind(this.save, this);
      var _ref, _ref1;

      if ((_ref = this.totalItems) == null) {
        this.totalItems = 0;
      }
      if ((_ref1 = this.totalSubscribers) == null) {
        this.totalSubscribers = 0;
      }
      this.settings = {};
      this.moderators = [];
      Forum.__super__.constructor.apply(this, arguments);
    }

    Forum.prototype.save = function(context, cb) {
      return Forum.__super__.save.apply(this, arguments);
    };

    Forum.prototype.summarize = function(fields) {
      var result;

      if (fields == null) {
        fields = [];
      }
      fields = fields.concat(['name', 'stub', 'type', 'createdBy', 'network']);
      result = Forum.__super__.summarize.call(this, fields);
      result.id = this._id.toString();
      return result;
    };

    Forum.validateSummary = function(forum) {
      var errors, field, required, _errors, _i, _len;

      errors = [];
      if (!forum) {
        errors.push("Invalid forum.");
      }
      required = ['id', 'name', 'stub', 'type', 'createdBy', 'network'];
      for (_i = 0, _len = required.length; _i < _len; _i++) {
        field = required[_i];
        if (!forum[field]) {
          errors.push("Invalid " + field);
        }
      }
      _errors = Forum._models.User.validateSummary(forum.createdBy);
      if (_errors.length) {
        errors.push('Invalid createdBy.');
        errors = errors.concat(_errors);
      }
      return errors;
    };

    Forum.prototype.validate = function() {
      var errors, mod, _errors, _i, _len, _ref;

      errors = Forum.__super__.validate.call(this).errors;
      if (!this.network || typeof this.network !== 'string') {
        errors.push('Invalid network.');
      }
      if (!this.name) {
        errors.push('Invalid name.');
      }
      if (!this.stub) {
        errors.push('Invalid stub.');
      }
      if (!this.type || ['post', 'event', 'user', 'poll', 'forum', 'image', 'file'].indexOf(this.type) === -1) {
        errors.push('Invalid type.');
      }
      if (!this.settings) {
        errors.push("Invalid settings.");
      }
      if (!this.icon) {
        errors.push('Invalid icon.');
      }
      if (!this.iconThumbnail) {
        errors.push('Invalid iconThumbnail.');
      }
      if (!this.cover) {
        errors.push('Invalid cover.');
      }
      _errors = Forum._models.User.validateSummary(this.createdBy);
      if (_errors.length) {
        errors.push('Invalid createdBy.');
        errors = errors.concat(_errors);
      }
      if (this.moderators.length < 1) {
        errors.push('There should be at least one moderator.');
      } else {
        _ref = this.moderators;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          mod = _ref[_i];
          _errors = Forum._models.User.validateSummary(mod);
          if (_errors.length) {
            errors.push('Invalid moderator.');
            errors = errors.concat(_errors);
          }
        }
      }
      switch (this.type) {
        case 'post':
          _errors = Forum._models.Post.validateForumSnapshot(this);
          if (_errors.length) {
            errors.push('Invalid snapshot.');
            errors = errors.concat(_errors);
          }
      }
      if (isNaN(this.totalItems)) {
        errors.push('Invalid totalItems.');
      }
      if (isNaN(this.totalSubscribers)) {
        errors.push('Invalid totalSubscribers.');
      }
      return {
        isValid: errors.length === 0,
        errors: errors
      };
    };

    return Forum;

  }).call(this, BaseModel);

  exports.Forum = Forum;

}).call(this);
