// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, Validator, console, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  utils = require('../common/utils');

  console = require('console');

  AppError = require('../common/apperror').AppError;

  Validator = (function() {
    function Validator() {
      this.validateField = __bind(this.validateField, this);
      this.validate = __bind(this.validate, this);
    }

    Validator.prototype.validate = function(model, fields, cb) {
      var def, errors, fieldName;

      errors = [];
      for (fieldName in fields) {
        def = fields[fieldName];
        errors.concat(this.validateField(model[fieldName], fieldName, model, def));
      }
      if (cb) {
        return cb(null, errors);
      } else {
        return errors;
      }
    };

    Validator.prototype.validateField = function(value, fieldName, model, def) {
      var errors, fieldDef, item, _i, _len;

      errors = [];
      if (!def.useCustomValidationOnly) {
        if (['string', 'number', 'boolean', 'object'].indexOf(def) !== -1) {
          fieldDef = {
            type: def,
            required: true
          };
        } else if (def === 'array') {
          fieldDef = {
            type: 'array',
            required: true
          };
        } else if (def.autoGenerated && (def.event === 'created' || def.event === 'updated')) {
          fieldDef = {
            type: 'number',
            required: true
          };
        } else {
          fieldDef = def;
        }
        if (fieldDef.required == null) {
          fieldDef.required = true;
        }
        if (fieldDef.type === 'array') {
          for (_i = 0, _len = value.length; _i < _len; _i++) {
            item = value[_i];
            errors.concat(this.validateField(item, '', null, fieldDef.contents));
          }
        } else {
          if ((this.isCustomClass(fieldDef.type) && value.constructor !== fieldDef.type) || (typeof value !== fieldDef.type)) {
            errors.concat("" + fieldName + " should be a " + fieldDef.type + ".");
          }
        }
      }
      if (def.validate) {
        errors.concat(def.validate.call(model));
      }
      return errors;
    };

    Validator.prototype.isCustomClass = function(type) {
      return ['string', 'number', 'boolean', 'object', 'array', ''].indexOf(type) === -1;
    };

    return Validator;

  })();

  exports.Validator = Validator;

}).call(this);
