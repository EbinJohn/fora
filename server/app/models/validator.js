// Generated by CoffeeScript 1.6.2
(function() {
  var AppError, Validator, console, utils,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  utils = require('../common/utils');

  console = require('console');

  AppError = require('../common/apperror').AppError;

  Validator = (function() {
    function Validator() {
      this.validateField = __bind(this.validateField, this);
      this.validate = __bind(this.validate, this);
    }

    Validator.prototype.validate = function(model, fields, cb) {
      var def, errors, fieldName, _results;

      errors = [];
      _results = [];
      for (fieldName in fields) {
        def = fields[fieldName];
        _results.push(errors.concat(def.validate ? def.validate.call(model) : this.validateField(model[fieldName], fieldName, model, def)));
      }
      return _results;
    };

    Validator.prototype.validateField = function(value, fieldName, model, def) {
      var errors, fieldDef, item, _i, _len;

      if (!def.skipValidation) {
        errors = [];
        if (['string', 'number', 'boolean', 'object'].indexOf(def) !== -1) {
          fieldDef = {
            type: def,
            required: true
          };
        } else if (def === 'array') {
          fieldDef = {
            type: 'array',
            required: true
          };
        } else if (def.autoGenerated && (def.event === 'created' || def.event === 'updated')) {
          fieldDef = {
            type: 'number',
            required: true
          };
        } else {
          fieldDef = def;
        }
        if (!this.isCustomClass(fieldDef.type)) {
          if (fieldDef.required && !value) {
            errors.push("" + fieldName + " is required.");
          }
          switch (fieldDef.type) {
            case '':
              break;
            case 'array':
              for (_i = 0, _len = value.length; _i < _len; _i++) {
                item = value[_i];
                this.validateField(item, '', null, fieldDef.contents);
              }
              break;
            default:
              if (typeof value !== fieldDef.type) {
                errors.push("" + fieldName + " should be a " + fieldDef.type + ".");
              }
          }
        } else {
          errors.concat(typeof value.validate === "function" ? value.validate() : void 0);
        }
        return errors;
      }
    };

    Validator.prototype.isCustomClass = function(type) {
      return ['string', 'number', 'boolean', 'object', 'array', ''].indexOf(type) === -1;
    };

    return Validator;

  })();

  exports.Validator = Validator;

}).call(this);
