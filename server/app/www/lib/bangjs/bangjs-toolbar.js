// Generated by CoffeeScript 1.6.3
(function() {
  var Toolbar,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Toolbar = (function() {
    function Toolbar(options, editable) {
      var item, items, _i, _len,
        _this = this;
      this.options = options;
      this.editable = editable;
      this.show = __bind(this.show, this);
      this.hide = __bind(this.hide, this);
      this.setPosition = __bind(this.setPosition, this);
      this.handleClick = __bind(this.handleClick, this);
      this.element = $('<div class="bangjs-editor-toolbar" style="display:none">\
                        <div class="handle">\
                            <i class="icon-move"></i>\
                        </div>\
                        <ul class="buttons"></ul>\
                        <div class="options-form" style="display:none"></div>\
                    </div>');
      $('body').append(this.element);
      this.buttons = this.element.find('.buttons');
      this.element.drags();
      items = this.options.items.split(',');
      this.element.css('width', "" + (20 + (items.length * 35)) + "px");
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        switch (item) {
          case 'h1':
            this.buttons.append('<li class="ce-icon-h1"><span href="#">H</span><li>');
            this.buttons.find('.ce-icon-h1').click(function() {
              return _this.handleClick(function() {
                return _this.editable.handleAction('h1');
              });
            });
            break;
          case 'h2':
            this.buttons.append('<li class="ce-icon-h2 hint hint--top" data-hint="Heading"><spanv href="#">H</span></li>');
            this.buttons.find('.ce-icon-h2').click(function() {
              return _this.handleClick(function() {
                return _this.editable.handleAction('h2');
              });
            });
            break;
          case 'bold':
            this.buttons.append('<li class="ce-icon-bold hint hint--top" data-hint="Bold"><span href="#">b</span></li>');
            this.buttons.find('.ce-icon-bold').click(function() {
              return _this.handleClick(function() {
                return _this.editable.handleAction('bold');
              });
            });
            break;
          case 'italic':
            this.buttons.append('<li class="ce-icon-italic hint hint--top" data-hint="Italic"><span href="#">i</span></li>');
            this.buttons.find('.ce-icon-italic').click(function() {
              return _this.handleClick(function() {
                return _this.editable.handleAction('italic');
              });
            });
            break;
          case 'image':
            this.buttons.append('<li class="ce-icon-image hint hint--top" data-hint="Upload a picture"><i class="icon-picture"></i></li>');
            this.buttons.find('.ce-icon-image').click(function() {
              return _this.handleClick(function() {
                return _this.editable.handleAction('image');
              });
            });
            break;
          case 'link':
            this.buttons.append('<li class="ce-icon-link hint hint--top" data-hint="Add a link"><i class="icon-link"></i></li>');
            this.buttons.find('.ce-icon-link').click(function() {
              return _this.handleClick(function() {
                return _this.editable.handleAction('link');
              });
            });
            break;
          case 'list':
            this.buttons.append('<li class="ce-icon-list hint hint--top" data-hint="Create a list"><i class="icon-list"></i></li>');
            this.buttons.find('.ce-icon-list').click(function() {
              return _this.handleClick(function() {
                return _this.editable.handleAction('list');
              });
            });
            break;
          case 'quote':
            this.buttons.append('<li class="ce-icon-quote hint hint--top" data-hint="Add quotes"><i class="icon-quote-left"></i></li>');
            this.buttons.find('.ce-icon-quote').click(function() {
              return _this.handleClick(function() {
                return _this.editable.handleAction('quote');
              });
            });
            break;
          case 'indent':
            this.buttons.append('<li class="ce-icon-indent hint hint--top" data-hint="Indent"><i class="icon-indent-right"></i></li>');
            this.buttons.find('.ce-icon-indent').click(function() {
              return _this.handleClick(function() {
                return _this.editable.handleAction('indent');
              });
            });
            break;
          case 'unformat':
            this.buttons.append('<li class="ce-icon-unformat hint hint--top" data-hint="Remove formatting"><i class="icon-remove-circle"></i></li>');
            this.buttons.find('.ce-icon-unformat').click(function() {
              return _this.handleClick(function() {
                return _this.editable.handleAction('unformat');
              });
            });
        }
      }
    }

    Toolbar.prototype.handleClick = function(fn) {
      return fn();
    };

    Toolbar.prototype.setPosition = function(position) {
      return this.element.css({
        top: "" + position.top + "px",
        left: "" + position.left + "px"
      });
    };

    Toolbar.prototype.hide = function() {
      return this.element.hide();
    };

    Toolbar.prototype.show = function() {
      return this.element.show();
    };

    return Toolbar;

  })();

  window.BangJS.Toolbar = Toolbar;

}).call(this);
