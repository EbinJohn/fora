async = require '../common/async'
utils = require '../common/utils'
AppError = require('../common/apperror').AppError
BaseModel = require('./basemodel').BaseModel
User = require('./user').User

class Post extends BaseModel
    
    @_getMeta: ->
        {
            type: Post,
            collection: 'posts',
            fields: {
                network: 'string',
                uid: 'string',
                forum: 'string',
                createdBy: { type: User.Summary, validate: -> @createdBy.validate() },
                recommendations: { type: 'array', contents: User.Summary, validate: -> user.validate() for user in @recommendations },
                meta: { type: 'array', contents: 'string' },
                rating: 'number',
                createdAt: { autoGenerated: true, event: 'created' },
                updatedAt: { autoGenerated: true, event: 'updated' }
            },
            concurrency: 'optimistic',
            logging: {
                isLogged: true,
                onInsert: 'NEW_POST'
            }
        }



    @search: (criteria, settings, context, cb) =>
        limit = @getLimit settings.limit, 100, 1000
                
        params = {}
        for k, v of criteria
            params[k] = v
        
        Post.find params, ((cursor) -> cursor.sort(settings.sort).limit limit), context, cb        
        
        
    
    constructor: (params) ->
        @recommendations ?= []
        @meta ?= []
        @tags ?= []
        @rating ?= 1
        @createdAt = Date.now()
        super
        
        
    
    save: (context, cb) =>
        if not @_id 
            @uid ?= utils.uniqueId()

        #If there is a stub, check if a post with the same stub already exists.
        if @stub
            Post.get { @stub }, {}, (err, post) =>
                if not post
                    super
                else
                    cb new AppError "Stub already exists", "STUB_EXISTS"
        else
            super



    summarize: (fields = []) =>
        fields = fields.concat ['uid', 'title', 'createdAt', 'timestamp', 'publishedAt', 'createdBy', 'network']
        result = super fields
        result.id = @_id.toString()
        result         
        

    
    createView: (type) =>
        switch type
            when 'summary', 'full'
                {
                    type: 'post',
                    summary: {
                        title: @summary.title,
                        text: if @summary.text then mdparser(@summary.text),
                        image: @summary.image
                    },
                    @uid,
                    @createdBy,
                    @forum,
                    @title,
                    content: if @content then mdparser(@content),
                    @cover
                }            

        
    
    @refreshForumSnapshot: (post, context, cb) =>
        @_models.Forum.get { stub: forum.stub }, {}, (err, forum) =>
            @search { "forums.stub": forum.stub, state: 'published' }, { sort: { publishedAt: -1 }, limit: 4 }, {}, (err, posts) =>
                @getCursor { "forums.stub": forum.stub, state: 'published' }, context, (err, cursor) =>
                    cursor.count (err, count) =>
                        forum.snapshot = {
                            recentPosts: (p.summarize() for p in posts),
                        }
                        forum.totalItems = count
                        forum.lastRefreshedAt = if posts[0] then posts[0].publishedAt else 0                            
                        forum.save context, cb                        



    @validateForumSnapshot: (forum) =>
        errors = []
        
        if forum.snapshot        
            for item in forum.snapshot.recentPosts
                _errors = Post.validateSummary item
                if _errors.length
                    errors = errors.concat _errors
                    
                if isNaN forum.totalItems
                    errors.push "snapshot.totalPosts should be a number."
                
                if isNaN forum.lastRefreshedAt
                    errors.push "snapshot.lastRefreshedAt should be a number."
        
        errors    
        

    @validateSummary: (post) =>
        errors = []
        
        if not post
            errors.push "Invalid post."
        
        required = ['id', 'uid', 'title', 'createdAt', 'timestamp', 'publishedAt', 'createdBy']
        for field in required
            if not post[field]
                errors.push "Invalid #{field}"

        _errors = Post._models.User.validateSummary(post.createdBy)
        if _errors.length            
            errors.push 'Invalid createdBy.'
            errors = errors.concat _errors
                
        errors


exports.Post = Post
