BaseModel = require('./basemodel').BaseModel
AppError = require('../common/apperror').AppError

class Forum extends BaseModel
        
    @_meta: {
        type: Forum,
        forum: 'forums',
        fields: {
            network: 'string',
            name: 'string',
            stub: 'stub',
            settings: 'object',
            icon: 'string',
            iconThumbnail: 'string',
            cover: { type: 'string', required: 'false' },
            createdBy: { type: Models.User.Summary, validate: -> @createdBy.validate() },
            moderators: { 
                type: Models.User.Summary, 
                validate: -> 
                    if @moderators.length
                        m.validate() for m in @moderators
                    else
                        'There should be at least one moderator.'
            },
            totalItems: 'number',
            totalSubscribers: 'number',              
            createdAt: { autoGenerated: true, event: 'created' },
            updatedAt: { autoGenerated: true, event: 'updated' }
        },
        logging: {
            isLogged: true,
            onInsert: 'NEW_FORUM'
        }
    }
        

    constructor: (params) ->
        @totalItems ?= 0
        @totalSubscribers ?= 0
        @settings = {}
        @moderators = []
        super
        

    
    save: (context, cb) =>
        super



    summarize: (fields = []) =>
        fields = fields.concat ['name', 'stub', 'type', 'createdBy', 'network']
        result = super fields
        result.id = @_id.toString()
        result        



    @validateSummary: (forum) =>
        errors = []
        if not forum
            errors.push "Invalid forum."
        
        required = ['id', 'name', 'stub', 'type', 'createdBy', 'network']
        for field in required
            if not forum[field]
                errors.push "Invalid #{field}"

        _errors = Forum._models.User.validateSummary(forum.createdBy)
        if _errors.length            
            errors.push 'Invalid createdBy.'
            errors = errors.concat _errors
                
        errors
                
    
    
exports.Forum = Forum
