AppError = require('../common/apperror').AppError
BaseModel = require('./basemodel').BaseModel

class Forum extends BaseModel
        
    @describeModel: ->
        {
            type: Forum,
            collection: 'forums',
            fields: {
                network: 'string',
                name: 'string',
                stub: 'string',
                settings: 'object',
                rules: { type: 'string', required: false },
                icon: 'string',
                iconThumbnail: 'string',
                cover: { type: 'string', required: false },
                createdBy: { type: @getModels().User.Summary, validate: -> @createdBy.validate() },
                moderators: {
                    type: 'array', 
                    contents: type: @getModels().User.Summary,
                    validate: -> 
                        if @moderators.length
                            m.validate() for m in @moderators
                },
                snapshot: 'object',
                totalItems: 'number',
                totalSubscribers: 'number',
                lastPost: 'number', 
                createdAt: { autoGenerated: true, event: 'created' },
                updatedAt: { autoGenerated: true, event: 'updated' }
            },
            logging: {
                isLogged: true,
                onInsert: 'NEW_FORUM'
            }
        }
        

    constructor: (params) ->
        super
        @totalItems ?= 0
        @totalSubscribers ?= 0
        @settings ?= {}
        @moderators ?= []
        @snapshot ?= { posts: [] }
        @lastPost ?= 0
        

        
    summarize: =>        
        summary = new Summary {
            id: @_id.toString()
            network: @network,
            name: @name,
            stub: @stub,
            createdBy: @createdBy
        }
        
        
    getView: (name = "standard") =>
        switch name
            when 'card'
                {
                    id: @_id.toString()
                    @network,
                    @name,
                    @stub,
                    @createdBy,
                    @snapshot,
                    image: @icon
                }
                
        
        
    refreshSnapshot: (context, db) =>
        @getModels().Post.find({ 'forum.id': @_id.toString() , state: 'published' }, ((cursor) -> cursor.sort({ _id: -1 }).limit 10), context, db)
            .then (posts) =>
                @snapshot = { posts: p.getView("snapshot") for p in posts }
                if posts.length
                    @lastPost = posts[0].publishedAt
                @save(context, db)
            
            
    
class Summary extends BaseModel    
    @describeModel: ->
        {
            type: Summary,
            fields: {
                id: 'string',
                network: 'string',
                name: 'string',
                stub: 'string',
                type: 'string',
                createdBy: @getModels().User.Summary
            }
        }    
            
Forum.Summary = Summary
exports.Forum = Forum
