utils = require('../common/utils')
console = require 'console'
AppError = require('../common/apperror').AppError

class Validator

    constructor: ->
        
        

    validate: (model, fields, cb) =>
        errors = []

        for fieldName, def of fields
            errors.concat @validateField(model[fieldName], fieldName, model, def)
        
        if cb
            cb null, errors
        else
            errors
            
                

    validateField: (value, fieldName, model, def) =>
        errors = []

        if not def.useCustomValidationOnly                
            #Convert short hands to full definitions.
            #eg: 'string' means { type: 'string', required: true }
            if ['string', 'number', 'boolean', 'object'].indexOf(def) isnt -1
                fieldDef = {
                    type: def,
                    required: true
                }
            else if def is 'array'
                fieldDef = {
                    type: 'array',
                    required: true
                }
            else if def.autoGenerated and (def.event is 'created' or def.event is 'updated')
                fieldDef = {
                    type: 'number',
                    required: true
                }
            else
                fieldDef = def

            #Required is true unless explicitly set.
            if not fieldDef.required?
                fieldDef.required = true
            
            if fieldDef.required and not value
                errors.concat "#{fieldName} is required."
            
            #Check types.            
            if value
                if fieldDef.type is 'array'
                    for item in value
                        errors.concat @validateField item, '', null, fieldDef.contents
                else
                    #If it is a custom class
                    if (@isCustomClass(fieldDef.type) and value.constructor isnt fieldDef.type) or (typeof(value) isnt fieldDef.type)
                        errors.concat "#{fieldName} should be a #{fieldDef.type}."                        

        if def.validate
            errors.concat def.validate.call model
        
        return errors
                
            

    isCustomClass: (type) ->
        ['string', 'number', 'boolean', 'object', 'array', ''].indexOf(type) is -1

exports.Validator = Validator
