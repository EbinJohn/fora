utils = require '../common/utils'
AppError = require('../common/apperror').AppError
BaseModel = require('./basemodel').BaseModel

class User extends BaseModel

    @describeModel: ->
        {
            type: User,
            collection: 'users',
            fields: {
                domain: { type: 'string', validate: -> ['twitter', 'fb', 'users'].indexOf(@domain) isnt -1 },
                username: 'string',
                name: 'string',
                location: 'string',
                picture: 'string',
                thumbnail: 'string',
                email: 'string',
                accessToken: { type: 'string', required: false },
                lastLogin: 'number',
                assetPath: 'string',
                following: { type: 'array', contents: @getModels().User.Summary, validate: -> x.validate() for x in @following },
                subscriptions: { type: 'array', contents: @getModels().Forum.Summary, validate: -> x.validate() for x in @subscriptions },            
                about: { type: 'string', required: false },
                createdAt: { autoGenerated: true, event: 'created' },
                updatedAt: { autoGenerated: true, event: 'updated' }            
            },
            logging: {
                isLogged: true,
                onInsert: 'NEW_USER'
            }
        }
        
    
    #Called from controllers when a new session is created.
    @getOrCreateUser: (userDetails, domain, accessToken, context, db, cb) =>
        @getModels().Session.get { accessToken }, context, db, (err, session) =>
            if err
                cb err
            else
                session ?= new (@getModels().Session) { passkey: utils.uniqueId(24), accessToken }
                    
                User.get { domain, username: userDetails.username }, context, db, (err, user) =>
                    if user?
                        #Update some details
                        user.name = userDetails.name ? user.name
                        user.username = userDetails.username
                        user.location = userDetails.location ? user.location
                        user.picture = userDetails.picture ? user.picture
                        user.thumbnail = userDetails.thumbnail ? user.thumbnail
                        user.tile = userDetails.tile ? user.tile
                        user.email = userDetails.email ? 'unknown@poe3.com'
                        user.lastLogin = Date.now()
                        user.save context, db, (err, u) =>
                            if not err
                                session.userid = u._id.toString()
                                session.save context, db, (err, session) =>
                                    if not err
                                        cb null, u, session
                                    else
                                        cb err
                            else
                                cb err
                        
                    else                            
                        #User doesn't exist. create.
                        user = new User()
                        user.domain = domain
                        user.username = userDetails.username
                        if domain is 'fb'
                            user.facebookUsername = userDetails.username
                        if domain is 'twitter'
                            user.twitterUsername = userDetails.username
                        user.name = userDetails.name
                        user.location = userDetails.location
                        user.picture = userDetails.picture
                        user.thumbnail = userDetails.thumbnail
                        user.tile = userDetails.tile ? '/images/collection-tile.png'
                        user.email = userDetails.email ? 'unknown@poe3.com'
                        user.lastLogin = Date.now()
                        user.preferences = { canEmail: true }
                        createdAt = new Date()
                        user.createdAt = createdAt.getTime()                                                                        
                        user.assetPath = "/pub/assetpaths/#{createdAt.getFullYear()}-#{createdAt.getMonth()+1}-#{createdAt.getDate()}"
                        user.save context, db, (err, u) =>
                            #also create the userinfo
                            if not err
                                userinfo = new (@getModels().UserInfo)
                                userinfo.userid = u._id.toString()
                                userinfo.save context, db, (err, _uinfo) =>
                                    if not err
                                        session.userid = u._id.toString()
                                        session.save context, db, (err, session) =>
                                            if not err
                                                cb null, u, session
                                            else
                                                cb err
                                    else
                                        cb err
                            else
                                cb err
                                
    
    
    @getByUsername: (domain, username, context, db, cb) ->
        User.get { domain, username }, context, db, (err, user) ->
            cb null, user


    constructor: (params) ->
        super
        @about ?= ''
        @karma ?= 1
        @preferences ?= {}
        @following ?= []
        @followerCount ?= []
        @subscriptions ?= []
        @totalItemCount ?= 0


    getUrl: =>
        if @domain is 'tw' then "/@#{@username}" else "/#{@domain}/#{@username}"



    summarize: =>        
       new Summary {
            id: @_id.toString()
            domain: @domain
            username: @username
            name: @name,
            @assetPath
        }

    
class Summary extends BaseModel    
    @describeModel: ->
        {
            type: Summary,
            fields: {
                id: 'string',
                domain: { type: 'string', validate: -> ['twitter', 'fb', 'users'].indexOf(@domain) isnt -1 },
                username: 'string',
                name: 'string',
                assetPath: 'string'
            }
        }
            
User.Summary = Summary                
exports.User = User
