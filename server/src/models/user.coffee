bcrypt = require('bcrypt')
utils = require '../common/utils'
AppError = require('../common/apperror').AppError
BaseModel = require('./basemodel').BaseModel

class User extends BaseModel

    @describeModel: ->
        {
            type: User,
            collection: 'users',
            fields: {
                username: 'string',
                name: 'string',
                location: 'string',
                picture: 'string',
                thumbnail: 'string',
                email: 'string',
                accessToken: { type: 'string', required: false },
                lastLogin: 'number',
                assetPath: 'string',
                following: { type: 'array', contents: @getModels().User.Summary, validate: -> x.validate() for x in @following },
                subscriptions: { type: 'array', contents: @getModels().Forum.Summary, validate: -> x.validate() for x in @subscriptions },            
                about: { type: 'string', required: false },
                createdAt: { autoGenerated: true, event: 'created' },
                updatedAt: { autoGenerated: true, event: 'updated' }            
            },
            logging: {
                isLogged: true,
                onInsert: 'NEW_USER'
            }
        }
       

   
    #Called from controllers when a new session is created.
    @create: (userDetails, authInfo, context, db, cb) ->
        switch authInfo.type
            when 'builtin'
                @createBuiltinUser userDetails, authInfo, context, db, cb
            when 'twitter'
                @createOrUpdateTwitterUser userDetails, authInfo, context, db, cb
            #when 'facebook'
            

            
    @createBuiltinUser: (userDetails, password, context, db, cb) ->
        @getModels().Credentials.get { username: userDetails.username }, context, db, (err, credentials) =>         
            if not credentials
                user = new User
                bcrypt.genSalt 10, (err, salt) =>
                    bcrypt.hash password, salt, (err, hash) =>
                        credentials = new Credentials {
                            username: userDetails.username,
                            token: utils.uniqueId(24), 
                            builtin: { encryption: 'bcrypt', hash }
                        }
                        @updateUser user, userDetails                        
                        user.save context, db, (err, user) =>                            
                            credentials.userid = user._id.toString()
                            credentials.save context, db, (err, credentials) =>
                                cb null, user, credentials.token
            else
                cb new AppError "User #{userDetails.username} already exists.", "USER_ALREADY_EXISTS"


  
    #Todo. Token Expiry.   
    @authenticateBuiltinUser: (username, password, context, db, cb) ->
        @getModels().Credentials.get { username }, context, db, (err, credentials) =>
            if credentials.builtin
                bcrypt.compare password, credentials.builtin.hash, (err, res) ->
                    if res
                        User.get { username }, context, db, (err, user) =>
                            if err
                                cb err
                            else
                                cb null, user, credentials.token
                    else
                        cb null, false
             else
                cb new AppError "User #{username} does not have an account.", "MISSING_CREDENTIAL_TYPE"
                
                                                        
    
    @getByUsername: (username, context, db, cb) ->
        User.get { username }, context, db, (err, user) ->
            cb null, user



    constructor: (params) ->
        super
        @about ?= ''
        @karma ?= 1
        @preferences ?= {}
        @following ?= []
        @followerCount ?= []
        @subscriptions ?= []
        @totalItemCount ?= 0



    getUrl: =>
        "/users/@#{username}"



    save: (context, db, cb) =>
        if not @_id
            super context, db, (err, user) =>
                cb err, user
                userinfo = new (@getModels().UserInfo) {
                    userid: user._id.toString(),
                    username: user.username                        
                }            
                userinfo.save context, db
        else
            super        
            
            
            
    updateFrom: (userDetails) =>
        @name = userDetails.name
        @location = userDetails.location
        @picture = userDetails.picture
        @thumbnail = userDetails.thumbnail
        @tile = userDetails.tile ? '/images/collection-tile.png'
        @email = userDetails.email ? 'unknown@foraproject.org'
        @lastLogin = Date.now()
        @preferences = { canEmail: true }
        @about = userDetails.about

        #Allow dev scripts to set assetPath for initial set of users, so that it stays the same.
        if userDetails.createdVia is 'internal' and userDetails.assetPath
            @assetPath = userDetails.assetPath    
        else
            createdAt = new Date
            @assetPath = "/pub/assetpaths/#{createdAt.getFullYear()}-#{createdAt.getMonth()+1}-#{createdAt.getDate()}"        



    summarize: =>        
       new Summary {
            id: @_id.toString()
            username: @username
            name: @name,
            @assetPath
        }

    
class Summary extends BaseModel    
    @describeModel: ->
        {
            type: Summary,
            fields: {
                id: 'string',
                username: 'string',
                name: 'string',
                assetPath: 'string'
            }
        }
            
User.Summary = Summary                
exports.User = User
