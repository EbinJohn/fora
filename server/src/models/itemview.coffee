Models = require './'
AppError = require('../common/apperror').AppError

class ItemView extends Models.BaseModel

    @_meta: {
        type: ItemView,
        collection: 'itemviews',
        fields: {
            network: 'string',
            forum: 'string',
            itemid: 'string',
            type: 'string',
            data: 'object',
            meta: { type: 'array', contents: 'string' },
            createdBy: { type: Models.User.Summary, validate: -> @createdBy.validate() },
            publishedAt: { type: 'number', validate: -> if @publishedAt and isNaN(@publishedAt) then ['PublishedAt must be a number.'] },
            state: { type: 'string', validate: -> ['new', 'draft', 'published'].indexOf @state },
            createdAt: { autoGenerated: true, event: 'created' },
            updatedAt: { autoGenerated: true, event: 'updated' }
        },
        logging: {
            isLogged: false,
        }
    }



    @search: (criteria, settings, context, cb) =>
        limit = @getLimit settings.limit, 100, 1000
                
        params = {}
        for k, v of criteria
            params[k] = v
        
        ItemView.find params, ((cursor) -> cursor.sort(settings.sort).limit limit), context, cb     
        
            

    constructor: (params) ->
        @meta ?= []
        super
        
        

    save: (context, cb) =>            
        super

    
    
exports.ItemView = ItemView
